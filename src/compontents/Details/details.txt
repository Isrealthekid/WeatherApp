// "use client"

// import { useState, useEffect } from "react"

// function Details({ cityId, navigate, cities, setCities, apiKey }) {
//   const [city, setCity] = useState(null)
//   const [weatherData, setWeatherData] = useState(null)
//   const [note, setNote] = useState("")
//   const [isEditingNote, setIsEditingNote] = useState(false)
//   const [hasNote, setHasNote] = useState(false)
//   const [isLoading, setIsLoading] = useState(true)
//   const [error, setError] = useState(null)
//   const [lastUpdated, setLastUpdated] = useState(null)

//   useEffect(() => {
//     const loadCityData = async () => {
//       setIsLoading(true)
//       setError(null)

//       try {
//         // Find city in the cities array
//         const foundCity = cities.find((c) => c.id.toString() === cityId.toString())

//         if (foundCity) {
//           setCity(foundCity)

//           // Fetch fresh weather data for this city
//           try {
//             const response = await fetch(
//               `https://api.openweathermap.org/data/2.5/weather?id=${cityId}&units=Metric&appid=${apiKey}`,
//             )

//             if (!response.ok) {
//               throw new Error("Failed to fetch weather data")
//             }

//             const data = await response.json()
//             console.log("API Response for city details:", data)

//             // Store the complete API response
//             setWeatherData(data)
//             setLastUpdated(new Date().toLocaleTimeString())

//             // Update city with latest data
//             const updatedCity = {
//               ...foundCity,
//               name: data.name,
//               country: data.sys.country,
//               coord: data.coord,
//               temp: Math.round(data.main.temp),
//               main: data.main,
//               weather: data.weather[0],
//               wind: data.wind,
//               clouds: data.clouds,
//               visibility: data.visibility,
//               dt: data.dt,
//               sys: data.sys,
//               timezone: data.timezone,
//               rawData: data,
//             }

//             setCity(updatedCity)

//             // Update the city in the cities array
//             const updatedCities = cities.map((c) => (c.id.toString() === cityId.toString() ? updatedCity : c))
//             setCities(updatedCities)
//             localStorage.setItem("cities", JSON.stringify(updatedCities))
//           } catch (err) {
//             console.error("Error fetching fresh weather data:", err)
//             // If we can't get fresh data, use the stored data
//             setWeatherData(
//               foundCity.rawData || {
//                 main: {
//                   temp: foundCity.temp,
//                   feels_like: foundCity.temp - 2,
//                   temp_min: foundCity.temp - 3,
//                   temp_max: foundCity.temp + 3,
//                   pressure: 1013,
//                   humidity: 70,
//                 },
//                 weather: [foundCity.weather],
//                 wind: foundCity.wind || { speed: 5, deg: 180 },
//                 clouds: foundCity.clouds || { all: 40 },
//                 visibility: foundCity.visibility || 10000,
//                 sys: foundCity.sys || {
//                   sunrise: Math.floor(Date.now() / 1000) - 21600,
//                   sunset: Math.floor(Date.now() / 1000) + 21600,
//                 },
//               },
//             )
//             setLastUpdated("Using cached data")
//           }

//           // Load notes for this city
//           const savedNotes = localStorage.getItem(`note-${cityId}`)
//           if (savedNotes) {
//             setNote(savedNotes)
//             setHasNote(true)
//           }
//         } else {
//           // City not found, redirect to home
//           navigate("home")
//         }
//       } catch (err) {
//         console.error("Error loading city data:", err)
//         setError("Failed to load city data. Please try again later.")
//       } finally {
//         setIsLoading(false)
//       }
//     }

//     loadCityData()
//   }, [cityId, navigate, cities, setCities, apiKey])

//   const saveNote = () => {
//     if (note.trim()) {
//       localStorage.setItem(`note-${cityId}`, note)
//       setIsEditingNote(false)
//       setHasNote(true)
//     }
//   }

//   const deleteNote = () => {
//     localStorage.removeItem(`note-${cityId}`)
//     setNote("")
//     setHasNote(false)
//     setIsEditingNote(false)
//   }

//   const toggleFavorite = () => {
//     // Update city in the cities array
//     const updatedCities = cities.map((c) => {
//       if (c.id.toString() === cityId.toString()) {
//         return { ...c, isFavorite: !c.isFavorite }
//       }
//       return c
//     })

//     setCities(updatedCities)
//     localStorage.setItem("cities", JSON.stringify(updatedCities))
//     setCity({ ...city, isFavorite: !city.isFavorite })
//   }

//   // Get weather icon URL
//   const getWeatherIconUrl = (iconCode) => {
//     return `https://openweathermap.org/img/wn/${iconCode}@4x.png`
//   }

//   // Get wind direction from degrees
//   const getWindDirection = (degrees) => {
//     const directions = ["N", "NE", "E", "SE", "S", "SW", "W", "NW"]
//     const index = Math.round(degrees / 45) % 8
//     return directions[index]
//   }

//   // Format timestamp to local time
//   const formatTime = (timestamp, timezone) => {
//     if (!timestamp) return "N/A"

//     // Convert to milliseconds and adjust for timezone
//     const date = new Date((timestamp + timezone) * 1000)
//     return date.toLocaleTimeString([], { hour: "2-digit", minute: "2-digit" })
//   }

//   if (isLoading) {
//     return (
//       <div className="container mx-auto px-4 py-8 max-w-4xl">
//         <button onClick={() => navigate("home")} className="flex items-center text-gray-600 hover:text-gray-900 mb-6">
//           <svg
//             xmlns="http://www.w3.org/2000/svg"
//             className="h-4 w-4 mr-2"
//             fill="none"
//             viewBox="0 0 24 24"
//             stroke="currentColor"
//           >
//             <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 19l-7-7m0 0l7-7m-7 7h18" />
//           </svg>
//           Back to Cities
//         </button>

//         <div className="bg-gradient-to-r from-blue-500 to-purple-600 text-white rounded-lg p-6 mb-6">
//           <div className="h-10 w-1/3 bg-white/20 rounded animate-pulse"></div>
//           <div className="h-6 w-1/4 mt-2 bg-white/20 rounded animate-pulse"></div>
//         </div>

//         <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
//           {[...Array(2)].map((_, index) => (
//             <div key={index} className="bg-white rounded-lg shadow-md p-6">
//               <div className="h-6 w-1/2 mb-4 bg-gray-200 rounded animate-pulse"></div>
//               <div className="grid grid-cols-2 gap-4">
//                 {[...Array(4)].map((_, i) => (
//                   <div key={i} className="flex items-center">
//                     <div className="h-8 w-8 rounded-full bg-gray-200 animate-pulse mr-2"></div>
//                     <div>
//                       <div className="h-4 w-20 mb-1 bg-gray-200 rounded animate-pulse"></div>
//                       <div className="h-4 w-12 bg-gray-200 rounded animate-pulse"></div>
//                     </div>
//                   </div>
//                 ))}
//               </div>
//             </div>
//           ))}
//         </div>
//       </div>
//     )
//   }

//   if (error) {
//     return (
//       <div className="container mx-auto px-4 py-8 max-w-4xl">
//         <button onClick={() => navigate("home")} className="flex items-center text-gray-600 hover:text-gray-900 mb-6">
//           <svg
//             xmlns="http://www.w3.org/2000/svg"
//             className="h-4 w-4 mr-2"
//             fill="none"
//             viewBox="0 0 24 24"
//             stroke="currentColor"
//           >
//             <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 19l-7-7m0 0l7-7m-7 7h18" />
//           </svg>
//           Back to Cities
//         </button>
//         <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded">{error}</div>
//       </div>
//     )
//   }

//   if (!city || !weatherData) {
//     return (
//       <div className="container mx-auto px-4 py-8 flex justify-center items-center h-screen">
//         <div className="text-center">
//           <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-gray-900 mx-auto mb-4"></div>
//           <p>Loading city data...</p>
//         </div>
//       </div>
//     )
//   }

//   return (
//     <div className="container mx-auto px-4 py-8 max-w-4xl">
//       <button onClick={() => navigate("home")} className="flex items-center text-gray-600 hover:text-gray-900 mb-6">
//         <svg
//           xmlns="http://www.w3.org/2000/svg"
//           className="h-4 w-4 mr-2"
//           fill="none"
//           viewBox="0 0 24 24"
//           stroke="currentColor"
//         >
//           <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 19l-7-7m0 0l7-7m-7 7h18" />
//         </svg>
//         Back to Cities
//       </button>

//       <div className="bg-gradient-to-r from-blue-500 to-purple-600 text-white rounded-lg p-6 mb-6">
//         <div className="flex justify-between items-center">
//           <div className="flex items-center">
//             <div>
//               <h1 className="text-3xl font-bold">{city.name}</h1>
//               <p className="text-xl">{weatherData.sys.country}</p>
//               <p className="text-sm mt-1 flex items-center">
//                 <svg
//                   xmlns="http://www.w3.org/2000/svg"
//                   className="h-3 w-3 mr-1"
//                   fill="none"
//                   viewBox="0 0 24 24"
//                   stroke="currentColor"
//                 >
//                   <path
//                     strokeLinecap="round"
//                     strokeLinejoin="round"
//                     strokeWidth={2}
//                     d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"
//                   />
//                 </svg>
//                 Last updated: {lastUpdated}
//               </p>
//             </div>
//             <button onClick={toggleFavorite} className="ml-2 text-yellow-400 hover:text-yellow-500 p-2">
//               <svg
//                 xmlns="http://www.w3.org/2000/svg"
//                 className="h-6 w-6"
//                 fill={city.isFavorite ? "currentColor" : "none"}
//                 viewBox="0 0 24 24"
//                 stroke="currentColor"
//               >
//                 <path
//                   strokeLinecap="round"
//                   strokeLinejoin="round"
//                   strokeWidth={2}
//                   d="M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z"
//                 />
//               </svg>
//             </button>
//           </div>
//           <div className="flex items-center">
//             <img
//               src={getWeatherIconUrl(weatherData.weather[0].icon) || "/placeholder.svg"}
//               alt={weatherData.weather[0].description}
//               className="w-20 h-20"
//             />
//             <div className="text-center ml-2">
//               <div className="text-5xl font-bold">{Math.round(weatherData.main.temp)}°C</div>
//               <p className="text-lg capitalize">{weatherData.weather[0].description}</p>
//             </div>
//           </div>
//         </div>
//         <div className="mt-4 text-sm">
//           <p>
//             <span className="inline-flex items-center mr-4">
//               <svg
//                 xmlns="http://www.w3.org/2000/svg"
//                 className="h-3 w-3 mr-1"
//                 fill="none"
//                 viewBox="0 0 24 24"
//                 stroke="currentColor"
//               >
//                 <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 15l7-7 7 7" />
//               </svg>
//               Feels like: {Math.round(weatherData.main.feels_like)}°C
//             </span>
//             <span className="inline-flex items-center mr-4">
//               <svg
//                 xmlns="http://www.w3.org/2000/svg"
//                 className="h-3 w-3 mr-1"
//                 fill="none"
//                 viewBox="0 0 24 24"
//                 stroke="currentColor"
//               >
//                 <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M14 5l7 7m0 0l-7 7m7-7H3" />
//               </svg>
//               Wind: {weatherData.wind.speed} m/s
//             </span>
//             <span className="inline-flex items-center">
//               <svg
//                 xmlns="http://www.w3.org/2000/svg"
//                 className="h-3 w-3 mr-1"
//                 fill="none"
//                 viewBox="0 0 24 24"
//                 stroke="currentColor"
//               >
//                 <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 14l-7 7m0 0l-7-7m7 7V3" />
//               </svg>
//               Humidity: {weatherData.main.humidity}%
//             </span>
//           </p>
//         </div>
//       </div>

//       <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
//         <div className="bg-white rounded-lg shadow-md overflow-hidden">
//           <div className="p-6">
//             <h2 className="text-xl font-semibold mb-4 flex items-center">
//               <svg
//                 xmlns="http://www.w3.org/2000/svg"
//                 className="h-5 w-5 mr-2"
//                 fill="none"
//                 viewBox="0 0 24 24"
//                 stroke="currentColor"
//               >
//                 <path
//                   strokeLinecap="round"
//                   strokeLinejoin="round"
//                   strokeWidth={2}
//                   d="M3 15a4 4 0 004 4h9a5 5 0 10-.1-9.999 5.002 5.002 0 10-9.78 2.096A4.001 4.001 0 003 15z"
//                 />
//               </svg>
//               Current Conditions
//             </h2>
//             <div className="grid grid-cols-2 gap-4">
//               <div className="flex items-center">
//                 <svg
//                   xmlns="http://www.w3.org/2000/svg"
//                   className="h-4 w-4 mr-2 text-blue-500"
//                   fill="none"
//                   viewBox="0 0 24 24"
//                   stroke="currentColor"
//                 >
//                   <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 15l7-7 7 7" />
//                 </svg>
//                 <div>
//                   <p className="text-sm text-gray-500">Feels Like</p>
//                   <p className="font-medium">{Math.round(weatherData.main.feels_like)}°C</p>
//                 </div>
//               </div>
//               <div className="flex items-center">
//                 <svg
//                   xmlns="http://www.w3.org/2000/svg"
//                   className="h-4 w-4 mr-2 text-blue-500"
//                   fill="none"
//                   viewBox="0 0 24 24"
//                   stroke="currentColor"
//                 >
//                   <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 14l-7 7m0 0l-7-7m7 7V3" />
//                 </svg>
//                 <div>
//                   <p className="text-sm text-gray-500">Humidity</p>
//                   <p className="font-medium">{weatherData.main.humidity}%</p>
//                 </div>
//               </div>
//               <div className="flex items-center">
//                 <svg
//                   xmlns="http://www.w3.org/2000/svg"
//                   className="h-4 w-4 mr-2 text-blue-500"
//                   fill="none"
//                   viewBox="0 0 24 24"
//                   stroke="currentColor"
//                 >
//                   <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M14 5l7 7m0 0l-7 7m7-7H3" />
//                 </svg>
//                 <div>
//                   <p className="text-sm text-gray-500">Wind</p>
//                   <p className="font-medium">{weatherData.wind.speed} m/s</p>
//                 </div>
//               </div>
//               <div className="flex items-center">
//                 <svg
//                   xmlns="http://www.w3.org/2000/svg"
//                   className="h-4 w-4 mr-2 text-blue-500"
//                   fill="none"
//                   viewBox="0 0 24 24"
//                   stroke="currentColor"
//                 >
//                   <path
//                     strokeLinecap="round"
//                     strokeLinejoin="round"
//                     strokeWidth={2}
//                     d="M9 20l-5.447-2.724A1 1 0 013 16.382V5.618a1 1 0 011.447-.894L9 7m0 13l6-3m-6 3V7m6 10l4.553 2.276A1 1 0 0021 18.382V7.618a1 1 0 00-.553-.894L15 4m0 13V4m0 0L9 7"
//                   />
//                 </svg>
//                 <div>
//                   <p className="text-sm text-gray-500">Direction</p>
//                   <p className="font-medium">{getWindDirection(weatherData.wind.deg)}</p>
//                 </div>
//               </div>
//               <div className="flex items-center">
//                 <div className="mr-2 h-4 w-4 flex items-center justify-center text-blue-500">
//                   <span className="text-xs">hPa</span>
//                 </div>
//                 <div>
//                   <p className="text-sm text-gray-500">Pressure</p>
//                   <p className="font-medium">{weatherData.main.pressure} hPa</p>
//                 </div>
//               </div>
//               <div className="flex items-center">
//                 <svg
//                   xmlns="http://www.w3.org/2000/svg"
//                   className="h-4 w-4 mr-2 text-blue-500"
//                   fill="none"
//                   viewBox="0 0 24 24"
//                   stroke="currentColor"
//                 >
//                   <path
//                     strokeLinecap="round"
//                     strokeLinejoin="round"
//                     strokeWidth={2}
//                     d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"
//                   />
//                   <path
//                     strokeLinecap="round"
//                     strokeLinejoin="round"
//                     strokeWidth={2}
//                     d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"
//                   />
//                 </svg>
//                 <div>
//                   <p className="text-sm text-gray-500">Visibility</p>
//                   <p className="font-medium">{(weatherData.visibility / 1000).toFixed(1)} km</p>
//                 </div>
//               </div>
//               {weatherData.main.sea_level && (
//                 <div className="flex items-center">
//                   <div className="mr-2 h-4 w-4 flex items-center justify-center text-blue-500">
//                     <span className="text-xs">SEA</span>
//                   </div>
//                   <div>
//                     <p className="text-sm text-gray-500">Sea Level</p>
//                     <p className="font-medium">{weatherData.main.sea_level} hPa</p>
//                   </div>
//                 </div>
//               )}
//               {weatherData.main.grnd_level && (
//                 <div className="flex items-center">
//                   <div className="mr-2 h-4 w-4 flex items-center justify-center text-blue-500">
//                     <span className="text-xs">GND</span>
//                   </div>
//                   <div>
//                     <p className="text-sm text-gray-500">Ground Level</p>
//                     <p className="font-medium">{weatherData.main.grnd_level} hPa</p>
//                   </div>
//                 </div>
//               )}
//               {weatherData.wind.gust && (
//                 <div className="flex items-center">
//                   <svg
//                     xmlns="http://www.w3.org/2000/svg"
//                     className="h-4 w-4 mr-2 text-blue-500"
//                     fill="none"
//                     viewBox="0 0 24 24"
//                     stroke="currentColor"
//                   >
//                     <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M14 5l7 7m0 0l-7 7m7-7H3" />
//                   </svg>
//                   <div>
//                     <p className="text-sm text-gray-500">Wind Gust</p>
//                     <p className="font-medium">{weatherData.wind.gust} m/s</p>
//                   </div>
//                 </div>
//               )}
//             </div>
//           </div>
//         </div>

//         <div className="bg-white rounded-lg shadow-md overflow-hidden">
//           <div className="p-6">
//             <h2 className="text-xl font-semibold mb-4 flex items-center">
//               <svg
//                 xmlns="http://www.w3.org/2000/svg"
//                 className="h-5 w-5 mr-2"
//                 fill="none"
//                 viewBox="0 0 24 24"
//                 stroke="currentColor"
//               >
//                 <path
//                   strokeLinecap="round"
//                   strokeLinejoin="round"
//                   strokeWidth={2}
//                   d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z"
//                 />
//               </svg>
//               Daily Information
//             </h2>
//             <div className="grid grid-cols-2 gap-4">
//               <div>
//                 <p className="text-sm text-gray-500">Min Temperature</p>
//                 <p className="font-medium">{Math.round(weatherData.main.temp_min)}°C</p>
//               </div>
//               <div>
//                 <p className="text-sm text-gray-500">Max Temperature</p>
//                 <p className="font-medium">{Math.round(weatherData.main.temp_max)}°C</p>
//               </div>
//               <div>
//                 <p className="text-sm text-gray-500">Cloudiness</p>
//                 <p className="font-medium">{weatherData.clouds.all}%</p>
//               </div>
//               <div>
//                 <p className="text-sm text-gray-500">Weather</p>
//                 <p className="font-medium capitalize">{weatherData.weather[0].main}</p>
//               </div>
//               <div className="flex items-center">
//                 <svg
//                   xmlns="http://www.w3.org/2000/svg"
//                   className="h-4 w-4 mr-2 text-orange-500"
//                   fill="none"
//                   viewBox="0 0 24 24"
//                   stroke="currentColor"
//                 >
//                   <path
//                     strokeLinecap="round"
//                     strokeLinejoin="round"
//                     strokeWidth={2}
//                     d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z"
//                   />
//                 </svg>
//                 <div>
//                   <p className="text-sm text-gray-500">Sunrise</p>
//                   <p className="font-medium">{formatTime(weatherData.sys.sunrise, weatherData.timezone)}</p>
//                 </div>
//               </div>
//               <div className="flex items-center">
//                 <svg
//                   xmlns="http://www.w3.org/2000/svg"
//                   className="h-4 w-4 mr-2 text-red-500"
//                   fill="none"
//                   viewBox="0 0 24 24"
//                   stroke="currentColor"
//                 >
//                   <path
//                     strokeLinecap="round"
//                     strokeLinejoin="round"
//                     strokeWidth={2}
//                     d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z"
//                   />
//                 </svg>
//                 <div>
//                   <p className="text-sm text-gray-500">Sunset</p>
//                   <p className="font-medium">{formatTime(weatherData.sys.sunset, weatherData.timezone)}</p>
//                 </div>
//               </div>
//               <div>
//                 <p className="text-sm text-gray-500">Coordinates</p>
//                 <p className="font-medium">
//                   {weatherData.coord.lat.toFixed(2)}, {weatherData.coord.lon.toFixed(2)}
//                 </p>
//               </div>
//               <div>
//                 <p className="text-sm text-gray-500">Local Time</p>
//                 <p className="font-medium">
//                   {new Date((Date.now() / 1000 + weatherData.timezone) * 1000).toLocaleTimeString()}
//                 </p>
//               </div>
//             </div>
//           </div>
//         </div>
//       </div>

//       <div className="bg-white rounded-lg shadow-md p-6">
//         <div className="flex justify-between items-center mb-4">
//           <h2 className="text-xl font-semibold">Personal Notes</h2>
//           <div className="flex gap-2">
//             {hasNote && !isEditingNote && (
//               <>
//                 <button
//                   className="flex items-center px-3 py-1 border border-gray-300 rounded-md hover:bg-gray-100 text-sm"
//                   onClick={() => setIsEditingNote(true)}
//                 >
//                   <svg
//                     xmlns="http://www.w3.org/2000/svg"
//                     className="h-4 w-4 mr-2"
//                     fill="none"
//                     viewBox="0 0 24 24"
//                     stroke="currentColor"
//                   >
//                     <path
//                       strokeLinecap="round"
//                       strokeLinejoin="round"
//                       strokeWidth={2}
//                       d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"
//                     />
//                   </svg>
//                   Edit
//                 </button>
//                 <button
//                   className="flex items-center px-3 py-1 bg-red-500 text-white rounded-md hover:bg-red-600 text-sm"
//                   onClick={deleteNote}
//                 >
//                   <svg
//                     xmlns="http://www.w3.org/2000/svg"
//                     className="h-4 w-4 mr-2"
//                     fill="none"
//                     viewBox="0 0 24 24"
//                     stroke="currentColor"
//                   >
//                     <path
//                       strokeLinecap="round"
//                       strokeLinejoin="round"
//                       strokeWidth={2}
//                       d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"
//                     />
//                   </svg>
//                   Delete
//                 </button>
//               </>
//             )}
//             {isEditingNote && (
//               <button
//                 className="flex items-center px-3 py-1 bg-blue-500 text-white rounded-md hover:bg-blue-600 text-sm"
//                 onClick={saveNote}
//               >
//                 <svg
//                   xmlns="http://www.w3.org/2000/svg"
//                   className="h-4 w-4 mr-2"
//                   fill="none"
//                   viewBox="0 0 24 24"
//                   stroke="currentColor"
//                 >
//                   <path
//                     strokeLinecap="round"
//                     strokeLinejoin="round"
//                     strokeWidth={2}
//                     d="M8 7H5a2 2 0 00-2 2v9a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-3m-1 4l-3 3m0 0l-3-3m3 3V4"
//                   />
//                 </svg>
//                 Save
//               </button>
//             )}
//           </div>
//         </div>

//         {isEditingNote ? (
//           <textarea
//             value={note}
//             onChange={(e) => setNote(e.target.value)}
//             placeholder="Write your notes about this city here..."
//             className="w-full min-h-[150px] p-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
//           />
//         ) : (
//           <div>
//             {hasNote ? (
//               <div className="bg-gray-50 p-4 rounded-md whitespace-pre-wrap">{note}</div>
//             ) : (
//               <div className="text-center py-8">
//                 <p className="text-gray-500 mb-4">No notes yet for this city.</p>
//                 <button
//                   className="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600"
//                   onClick={() => setIsEditingNote(true)}
//                 >
//                   Add a Note
//                 </button>
//               </div>
//             )}
//           </div>
//         )}
//       </div>
//     </div>
//   )
// }

// export default Details






















// "use client"

// import { useState, useEffect } from "react"
// // import ConnectionStatus from "../ConnectionStatus"

// // Initial cities to load
// const initialCityNames = [
//   "Bangkok",
//   "Beijing",
//   "Cairo",
//   "Delhi",
//   "Dhaka",
//   "Istanbul",
//   "Jakarta",
//   "Karachi",
//   "Kinshasa",
//   "Lagos",
//   "London",
//   "Mexico City",
//   "Mumbai",
//   "New York",
//   "Tokyo",
// ]

// function Home({ navigate, cities, setCities, apiKey }) {
//   const [searchTerm, setSearchTerm] = useState("")
//   const [searchResults, setSearchResults] = useState([])
//   const [isLoading, setIsLoading] = useState(true)
//   const [error, setError] = useState(null)

//   // Load cities from localStorage or fetch initial data
//   useEffect(() => {
//     const loadCities = async () => {
//       setIsLoading(true)
//       setError(null)

//       try {
//         // Check if we have saved cities in localStorage
//         const savedCities = localStorage.getItem("cities")

//         if (savedCities) {
//           setCities(JSON.parse(savedCities))
//           setIsLoading(false)
//           return
//         }

//         // If no saved cities, fetch the initial list
//         const cityPromises = initialCityNames.map(async (cityName, index) => {
//           try {
//             const response = await fetch(
//               `https://api.openweathermap.org/data/2.5/weather?q=${cityName}&units=Metric&appid=${apiKey}`,
//             )

//             if (!response.ok) {
//               throw new Error(`Failed to fetch data for ${cityName}`)
//             }

//             const data = await response.json()

//             // Store the complete API response
//             return {
//               id: data.id,
//               name: data.name,
//               country: data.sys.country,
//               coord: data.coord,
//               temp: Math.round(data.main.temp),
//               main: data.main,
//               weather: data.weather[0],
//               wind: data.wind,
//               clouds: data.clouds,
//               visibility: data.visibility,
//               dt: data.dt,
//               sys: data.sys,
//               timezone: data.timezone,
//               isFavorite: false,
//               // Store the complete raw data for future reference
//               rawData: data,
//             }
//           } catch (err) {
//             console.error(`Error fetching ${cityName}:`, err)
//             // Return a placeholder for failed cities
//             return {
//               id: index + 1000,
//               name: cityName,
//               country: "Unknown",
//               temp: 0,
//               weather: {
//                 main: "Unknown",
//                 description: "Data unavailable",
//                 icon: "50d",
//               },
//               isFavorite: false,
//             }
//           }
//         })

//         const fetchedCities = await Promise.all(cityPromises)
//         setCities(fetchedCities)
//         localStorage.setItem("cities", JSON.stringify(fetchedCities))
//       } catch (err) {
//         console.error("Error loading cities:", err)
//         setError("Failed to load cities. Please try again later.")
//       } finally {
//         setIsLoading(false)
//       }
//     }

//     loadCities()
//   }, [apiKey, setCities])

//   // Save cities to localStorage whenever they change
//   useEffect(() => {
//     if (cities.length > 0) {
//       localStorage.setItem("cities", JSON.stringify(cities))
//     }
//   }, [cities])

//   // Handle search
//   const handleSearch = async () => {
//     if (!searchTerm.trim()) {
//       setSearchResults([])
//       return
//     }

//     try {
//       // Check if city already exists in our list
//       const cityExists = cities.find((city) => city.name.toLowerCase() === searchTerm.toLowerCase())

//       if (cityExists) {
//         setSearchResults([cityExists])
//         return
//       }

//       // Fetch from API
//       const response = await fetch(
//         `https://api.openweathermap.org/data/2.5/weather?q=${searchTerm}&units=Metric&appid=${apiKey}`,
//       )

//       if (!response.ok) {
//         throw new Error(`City "${searchTerm}" not found`)
//       }

//       const data = await response.json()

//       const newCity = {
//         id: data.id,
//         name: data.name,
//         country: data.sys.country,
//         coord: data.coord,
//         temp: Math.round(data.main.temp),
//         main: data.main,
//         weather: data.weather[0],
//         wind: data.wind,
//         clouds: data.clouds,
//         visibility: data.visibility,
//         dt: data.dt,
//         sys: data.sys,
//         timezone: data.timezone,
//         isFavorite: false,
//         // Store the complete raw data for future reference
//         rawData: data,
//       }

//       setSearchResults([newCity])

//       // Log the complete data to console for debugging
//       console.log("API Response:", data)
//     } catch (err) {
//       console.error("Search error:", err)
//       setSearchResults([])
//       setError(`City "${searchTerm}" not found. Please check the spelling and try again.`)

//       // Clear error after 3 seconds
//       setTimeout(() => setError(null), 3000)
//     }
//   }

//   // Add city to favorites
//   const addToFavorites = (city) => {
//     // Check if city already exists
//     const existingCity = cities.find((c) => c.id === city.id)

//     if (existingCity) {
//       // Update existing city
//       setCities(cities.map((c) => (c.id === city.id ? { ...c, isFavorite: true } : c)))
//     } else {
//       // Add new city with favorite flag
//       setCities([...cities, { ...city, isFavorite: true }])
//     }

//     setSearchResults([])
//     setSearchTerm("")
//   }

//   // Remove city from list
//   const removeCity = (cityId) => {
//     setCities(cities.filter((city) => city.id !== cityId))
//   }

//   // Toggle favorite status
//   const toggleFavorite = (cityId) => {
//     setCities(cities.map((city) => (city.id === cityId ? { ...city, isFavorite: !city.isFavorite } : city)))
//   }

//   // Sort cities: favorites first, then alphabetically
//   const sortedCities = [...cities].sort((a, b) => {
//     if (a.isFavorite && !b.isFavorite) return -1
//     if (!a.isFavorite && b.isFavorite) return 1
//     return a.name.localeCompare(b.name)
//   })

//   // Get weather icon URL
//   const getWeatherIconUrl = (iconCode) => {
//     return `https://openweathermap.org/img/wn/${iconCode}@2x.png`
//     // https://openweathermap.org/img/wn/4d@2x.png

//     // console.log(getWeatherIconUrl)
//   }

//    const getnewWeatherIconUrl = (iconCode) => {
//     return `https://openweathermap.org/img/wn/${iconCode}@2x.png`
//     // https://openweathermap.org/img/wn/4d@2x.png

//     // console.log(getWeatherIconUrl)
//   }


 

//   return (

//     <div className="container mx-auto px-4 py-8 max-w-4xl">

//            {/* <ConnectionStatus/> */}



//       <header className="mb-8">
//         <h1 className="text-3xl font-bold text-center mb-2">Weather Tracker</h1>
//         <p className="text-center text-gray-600 mb-6">Track weather conditions for cities around the world</p>

//         <div className="flex gap-2 mb-4">
//           <input
//             type="text"
//             placeholder="Search for a city..."
//             value={searchTerm}
//             onChange={(e) => setSearchTerm(e.target.value)}
//             className="flex-1 px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
//             onKeyDown={(e) => e.key === "Enter" && handleSearch()}
//           />
//           <button
//             onClick={handleSearch}
//             className="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-md flex items-center"
//           >
//             <svg
//               xmlns="http://www.w3.org/2000/svg"
//               className="h-4 w-4 mr-2"
//               fill="none"
//               viewBox="0 0 24 24"
//               stroke="currentColor"
//             >
//               <path
//                 strokeLinecap="round"
//                 strokeLinejoin="round"
//                 strokeWidth={2}
//                 d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
//               />
//             </svg>
//             Search
//           </button>
//         </div>

//         {error && <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">{error}</div>}

//         {searchResults.length > 0 && (
//           <div className="bg-white rounded-lg shadow-md p-4 mb-6">
//             <h2 className="text-lg font-semibold mb-2">Search Results</h2>
//             {searchResults.map((city) => (
//               <div
//                 key={city.id}
//                 className="flex items-center justify-between p-3 border-b last:border-0 hover:bg-gray-50 cursor-pointer rounded"
//                 onClick={() => navigate("details", city.id)}
//               >
//                 <div className="flex items-center">
//                   <img
//                     src={getWeatherIconUrl(city.weather.icon) || "/placeholder.svg"}
//                     alt={city.weather.description}
//                     className="w-10 h-10 mr-2"
//                   />
//                   <div>
//                     <p className="font-medium">
//                       {city.name}, {city.country}
//                     </p>
//                     <p className="text-sm text-gray-600">
//                       {city.temp}°C - {city.weather.description}
//                     </p>
//                   </div>
//                 </div>
//                 <div className="flex gap-2">
//                   <button
//                     className="px-3 py-1 border-2 border-gray-300 rounded-md hover:bg-gray-600 text-sm"
//                     onClick={(e) => {
//                       e.stopPropagation()
//                       navigate("details", city.id)
//                     }}
//                   >
//                     View Details
//                   </button>
//                   <button
//                     className="px-3 py-1 border border-gray-300 rounded-md hover:bg-gray-100 text-sm"
//                     onClick={(e) => {
//                       e.stopPropagation()
//                       addToFavorites(city)
//                     }}
//                   >
//                     Add to Favorites
//                   </button>
//                 </div>
//               </div>
//             ))}
//           </div>
//         )}
//       </header>

//       <main>
//         <h2 className="text-xl font-semibold mb-4">Cities</h2>

//         {isLoading ? (
//           <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
//             {[...Array(6)].map((_, index) => (
//               <div key={index} className="bg-white rounded-lg shadow-md p-4">
//                 <div className="h-6 w-3/4 mb-2 bg-gray-200 rounded animate-pulse"></div>
//                 <div className="h-4 w-1/2 mb-4 bg-gray-200 rounded animate-pulse"></div>
//                 <div className="flex justify-between items-center">
//                   <div className="h-8 w-8 rounded-full bg-gray-200 animate-pulse"></div>
//                   <div className="h-8 w-24 bg-gray-200 rounded animate-pulse"></div>
//                 </div>
//               </div>
//             ))}
//           </div>
//         ) : (
//           <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
//             {sortedCities.map((city) => (
//               <div
//                 key={city.id}
//                 className="bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow"
//               >
//                 <div className="p-4">
//                   <div className="flex justify-between items-start">
//                     <div>
//                       <h3 className="font-bold text-lg">{city.name}</h3>
//                       <p className="text-gray-600">{city.country}</p>
//                     </div>
//                     <div className="flex items-center">
//                       <img
//                         src={getWeatherIconUrl(city.weather.icon) || "/placeholder.svg"}
//                         alt={city.weather.description}
//                         className="w-10 h-10 mr-1"
//                       />
//                       <span className="text-2xl font-bold">{city.temp}°C</span>
//                     </div>
//                   </div>
//                   <p className="text-sm text-gray-600 mt-1 capitalize">{city.weather.description}</p>

//                   <div className="flex justify-between items-center mt-4">
//                     <button className="flex justify-between gap-1 text-red-500 hover:text-gray-100 hover:bg-red-600 p-2 px-2 py-2 border border-gray-300 rounded-md hover:bg-gray-100" onClick={() => removeCity(city.id)}>
//                       <svg
//                         xmlns="http://www.w3.org/2000/svg"
//                         className="h-5 w-5"
//                         fill="none"
//                         viewBox="0 0 24 24"
//                         stroke="currentColor"
//                       >
//                         <path
//                           strokeLinecap="round"
//                           strokeLinejoin="round"
//                           strokeWidth={2}
//                           d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"
//                         />
//                       </svg>  
//                       {/* <span className="p-0">Delete</span> */}
//                     </button>
//                     <div className="flex gap-2">
//                       <button
//                         className="text-yellow-400 hover:text-yellow-500 p-2"
//                         onClick={() => toggleFavorite(city.id)}
//                       >
//                         <svg
//                           xmlns="http://www.w3.org/2000/svg"
//                           className="h-5 w-5"
//                           fill={city.isFavorite ? "currentColor" : "none"}
//                           viewBox="0 0 24 24"
//                           stroke="currentColor"
//                         >
//                           <path
//                             strokeLinecap="round"
//                             strokeLinejoin="round"
//                             strokeWidth={2}
//                             d="M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z"
//                           />
//                         </svg>
//                       </button>
//                       <button
//                         className="px-3 py-1 border border-gray-300 rounded-md hover:bg-gray-100 text-sm"
//                         onClick={() => navigate("details", city.id)}
//                       >
//                         View Details
//                       </button>
//                     </div>
//                   </div>
//                 </div>
//               </div>
//             ))}
//           </div>
//         )}
//       </main>
//     </div>
//   )
// }

// export default Home
